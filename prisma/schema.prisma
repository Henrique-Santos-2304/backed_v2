generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_URL")
}

enum UserType {
  SUDO
  WORKER
  DEALER
  OWNER
}

model User {
  id           String        @id @db.Uuid
  username     String        @unique @db.VarChar(255)
  password     String        @db.VarChar(255)
  user_type    UserType      @default(OWNER)
  secret       String?       @db.VarChar(255)
  farms        Farm[]

  @@map("users")
}

model Farm {
  id        String        @id @unique @db.VarChar(255)
  owner     String        @db.Uuid
  dealer    String?       
  workers   String[]


  name String        @db.VarChar(255)
  city String        @db.VarChar(255)
  latitude  Float    @db.Real
  longitude  Float    @db.Real
  timezone  String

  user     User    @relation(fields: [owner], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pivots Pivot[]
  @@map("farms")
}

model Pivot {
  id                String     @id @unique @db.VarChar(255)
  farm_id           String        
  num               Int  

  last_state        String     @default("#0-id-000-000-000-000-date")
  last_timestamp    DateTime   @db.Timestamp()
  init_angle        Float

  latitude          Float
  longitude         Float

  start_angle       Float
  end_angle         Float          
  radius            Float
  is_gprs           Boolean
  ip_gateway        String?

  farm              Farm    @relation(fields: [farm_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  states            State[]
  connections       Connection[]

  @@map("pivots")
}

model State { 
  id           String        @id @db.Uuid
  pivot_id     String 
  start_date   DateTime
  end_date     DateTime?
  is_off       Boolean
  status       String        @db.VarChar(255)
  start_variable String
  timestamp    DateTime

  pivot        Pivot         @relation(fields: [pivot_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cycles       Cycle[]
 @@map("states")
}

model Cycle {
  id           String        @id @db.Uuid
  state_id     String        @db.Uuid
  status       String        @db.VarChar(255)
  timestamp    DateTime

  state        State         @relation(fields: [state_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@map("cycles")
}

model Connection {
  id           String        @id @db.Uuid
  pivot_id     String 
  loss_date DateTime
  recovery_date  DateTime?
  timestamp  DateTime

  pivot        Pivot         @relation(fields: [pivot_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@map("connections")
}


