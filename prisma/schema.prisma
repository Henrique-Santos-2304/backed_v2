generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
enum UserType {
  SUDO
  WORKER
  DEALER
  OWNER
}
/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model User {
  id           String        @id @db.Uuid
  username     String        @unique @db.VarChar(255)
  password     String        @db.VarChar(255)
  user_type    UserType      @default(OWNER)
  secret       String?       @db.VarChar(255)
  farms        Farm[]

  @@map("users")
}

model Farm {
  id        String        @id @unique @db.VarChar(255)
  owner     String        @db.Uuid
  dealer    String?       
  workers   String[]


  name String        @db.VarChar(255)
  city String        @db.VarChar(255)
  latitude  Float    @db.Real
  longitude  Float    @db.Real
  timezone  String

  user     User    @relation(fields: [owner], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pivots Pivot[]
  @@map("farms")
}

model Pivot {
  id                String        @id @unique @db.VarChar(255)
  farm_id           String        
  num               Int       
  last_state        String   @default("#0-id-000-000-000-000-date")
  last_timestamp    DateTime   @db.Timestamp()

  latitude          Int
  longitude         Int

  start_angle       Float
  end_angle         Float          
  radius            Float
  is_gprs           Boolean
  ip_gateway        String

  farm              Farm    @relation(fields: [farm_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("pivots")
}



